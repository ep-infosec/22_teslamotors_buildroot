Backport a fix from master protobuf to remove compiler warnings for unused parameters
in this heavily used header file.

Original change from protobuf 3.7.1+:
https://github.com/protocolbuffers/protobuf/commit/403d216d5ab74eaea15d2ab709b409210532c10f
--- a/src/google/protobuf/inlined_string_field.h
+++ b/src/google/protobuf/inlined_string_field.h
@@ -61,28 +61,28 @@
                          const InlinedStringField& from)
     GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE;
 
-  void ClearToEmpty(const ::std::string* default_value, Arena* arena)
+  void ClearToEmpty(const ::std::string* default_value, Arena* /*arena*/)
       GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     ClearToEmptyNoArena(default_value);
   }
   void ClearNonDefaultToEmpty() GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     ClearNonDefaultToEmptyNoArena();
   }
-  void ClearToEmptyNoArena(const ::std::string* default_value)
+  void ClearToEmptyNoArena(const ::std::string* /*default_value*/)
       GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     ClearNonDefaultToEmptyNoArena();
   }
   void ClearNonDefaultToEmptyNoArena()
     GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE;
 
-  void ClearToDefault(const ::std::string* default_value, Arena* arena)
+  void ClearToDefault(const ::std::string* default_value, Arena* /*arena*/)
       GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     ClearToDefaultNoArena(default_value);
   }
   void ClearToDefaultNoArena(const ::std::string* default_value)
     GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE;
 
-  void Destroy(const ::std::string* default_value, Arena* arena)
+  void Destroy(const ::std::string* default_value, Arena* /*arena*/)
       GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     DestroyNoArena(default_value);
   }
@@ -94,17 +94,17 @@
   }
   const ::std::string& GetNoArena() const GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE;
 
-  ::std::string* Mutable(const ::std::string* default_value, Arena* arena)
+  ::std::string* Mutable(const ::std::string* default_value, Arena* /*arena*/)
       GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     return MutableNoArena(default_value);
   }
   ::std::string* MutableNoArena(const ::std::string* default_value)
     GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE;
 
-  ::std::string* Release(const ::std::string* default_value, Arena* arena) {
+  ::std::string* Release(const ::std::string* default_value, Arena* /*arena*/) {
     return ReleaseNoArena(default_value);
   }
-  ::std::string* ReleaseNonDefault(const ::std::string* default_value, Arena* arena) {
+  ::std::string* ReleaseNonDefault(const ::std::string* default_value, Arena* /*arena*/) {
     return ReleaseNonDefaultNoArena(default_value);
   }
   ::std::string* ReleaseNoArena(const ::std::string* default_value) {
@@ -114,12 +114,12 @@
 
   void Set(const ::std::string* default_value,
            StringPiece value,
-           Arena* arena) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
+           Arena* /*arena*/) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     SetNoArena(default_value, value);
   }
   void SetLite(const ::std::string* default_value,
                StringPiece value,
-               Arena* arena) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
+               Arena* /*arena*/) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     SetNoArena(default_value, value);
   }
   void SetNoArena(const ::std::string* default_value,
@@ -127,12 +127,12 @@
 
   void Set(const ::std::string* default_value,
            const ::std::string& value,
-           Arena* arena) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
+           Arena* /*arena*/) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     SetNoArena(default_value, value);
   }
   void SetLite(const ::std::string* default_value,
                const ::std::string& value,
-               Arena* arena) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
+               Arena* /*arena*/) GOOGLE_PROTOBUF_ATTRIBUTE_ALWAYS_INLINE {
     SetNoArena(default_value, value);
   }
   void SetNoArena(const ::std::string* default_value,
@@ -146,7 +146,7 @@
 #endif
   void SetAllocated(const ::std::string* default_value,
                     ::std::string* value,
-                    Arena* arena) {
+                    Arena* /*arena*/) {
     SetAllocatedNoArena(default_value, value);
   }
   void SetAllocatedNoArena(const ::std::string* default_value,
@@ -159,7 +159,7 @@
   void UnsafeArenaSetAllocated(
       const ::std::string* default_value, ::std::string* value, Arena* arena);
 
-  bool IsDefault(const ::std::string* default_value) {
+  bool IsDefault(const ::std::string* /*default_value*/) {
     return false;
   }
  private:
@@ -172,7 +172,7 @@
   value_(default_value) {}
 
 inline void InlinedStringField::AssignWithDefault(
-    const ::std::string* default_value, const InlinedStringField& from) {
+    const ::std::string* /*default_value*/, const InlinedStringField& from) {
   value_ = from.value_;
 }
 
@@ -221,18 +221,18 @@
 }
 
 inline void InlinedStringField::SetNoArena(
-    const ::std::string* default_value, StringPiece value) {
+    const ::std::string* /*default_value*/, StringPiece value) {
   value_.assign(value.data(), value.length());
 }
 
 inline void InlinedStringField::SetNoArena(
-    const ::std::string* default_value, const ::std::string& value) {
+    const ::std::string* /*default_value*/, const ::std::string& value) {
   value_.assign(value);
 }
 
 #if LANG_CXX11
 inline void InlinedStringField::SetNoArena(
-    const ::std::string* default_value, ::std::string&& value) {
+    const ::std::string* /*default_value*/, ::std::string&& value) {
   value_.assign(std::move(value));
 }
 #endif
@@ -251,12 +251,12 @@
 }
 
 inline ::std::string* InlinedStringField::UnsafeArenaRelease(
-    const ::std::string* default_value, Arena* arena) {
+    const ::std::string* default_value, Arena* /*arena*/) {
   return ReleaseNoArena(default_value);
 }
 
 inline void InlinedStringField::UnsafeArenaSetAllocated(
-    const ::std::string* default_value, ::std::string* value, Arena* arena) {
+    const ::std::string* default_value, ::std::string* value, Arena* /*arena*/) {
   if (value == NULL) {
     value_.assign(*default_value);
   } else {
